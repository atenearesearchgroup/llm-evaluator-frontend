---
import { type RequestError } from "@/model/request";
import { getModels } from "@/services/intentService";
import type { IntentModel } from "@/model/model";
import { IntentGroup } from "./sidebar/IntentGroup";
import {
    ChevronLeftIcon,
    ChevronRightIcon
} from "lucide-react";
import { Button } from "../shadcdn/ui/button";

const intentModels = await getModels();

let intents: IntentModel[] = [];

// check if intentModels is part of RequestError interface
if ('requestError' in intentModels ) {
    console.error(intentModels);
} else {
    intents = intentModels as IntentModel[];
}
---

<aside
    class="bg-card
     bg-opacity-70 rounded-r-3xl
pr-3 py-3 
flex flex-col overflow-y-auto"
>
    <div class="flex flex-row justify-start space-x-6 items-center">
        <h2
            id="draft-title"
            class="font-bold text-lg ml-8 opacity-100 transition-all duration-300"
        >
            Instances
        </h2>

        <Button id="toggle" variant="secondary" size="icon" className="size-8">
            <ChevronLeftIcon id="toggle-off" className="size-5" />
            <ChevronRightIcon id="toggle-on" className="size-5 hidden" />
        </Button>
    </div>
    <ul
        id="list"
        class="m-3 max-h-fit overflow-x-auto overflow-y-hidden grid opacity-100 gap-3 transition-all duration-200"
    >
        {
            intents.map((intent, _) => {
                return <IntentGroup intentModel={intent} client:visible />;
            })
        }
    </ul>
</aside>

<script>
    function init() {
        const $toggle = document.getElementById("toggle");
        const $aside = document.getElementById("list");
        const $title = document.getElementById("draft-title");
        let timeout: NodeJS.Timeout | null = null;

        if (!$toggle || !$aside || !$title) {
            return;
        }

        $toggle.addEventListener("click", () => {
            if (timeout !== null) {
                clearTimeout(timeout);
                timeout = null;
            }

            if ($aside.classList.contains("opacity-100")) {
                timeout = setTimeout(() => {
                    $aside.classList.toggle("hidden");
                    $title.classList.toggle("hidden");
                    timeout = null;
                }, 210);
            } else {
                $aside.classList.remove("hidden");
                $title.classList.remove("hidden");
            }

            // $aside.classList.toggle("hidden")
            $aside.classList.toggle("opacity-0");
            $aside.classList.toggle("opacity-100");
            // $title.classList.toggle("hidden")
            $title.classList.toggle("opacity-0");
            $title.classList.toggle("opacity-100");

            const $toggleOff = document.getElementById("toggle-off");
            const $toggleOn = document.getElementById("toggle-on");

            if ($toggleOff && $toggleOn) {
                $toggleOff.classList.toggle("hidden");
                $toggleOn.classList.toggle("hidden");
            }
        });
    }
    init();

    document.addEventListener("astro:after-swap", init);
</script>

<script>
    const bc = new BroadcastChannel("title_change");

    function checkUpdate(instanceId: Number, newTitle: string) {
        console.log({ instanceId, newTitle });

        const $draftLi = document.querySelectorAll(`.draft-cell`);

        $draftLi.forEach((li) => {
            const id = li.getAttribute("data-id");

            if (id === null || parseInt(id) !== instanceId) {
                return;
            }

            const $title = li.querySelector("a");

            if ($title === null) {
                console.error("Title anchor not found");
                return;
            }

            $title.textContent = newTitle;
        });
    }

    bc.onmessage = (event) => {
        const { instanceId, newTitle } = event.data;

        checkUpdate(instanceId, newTitle);
    };
</script>
