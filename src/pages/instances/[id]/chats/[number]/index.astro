---
import type { Chat } from "@/model/chat";
import ActionNode from "@/components/evaluation/diagram/ActionNode.astro";
import DecisionNode from "@/components/evaluation/diagram/DecisionNode.astro";
import { ChatStatus } from "@/components/instance/sections/ChatStatus";
import { DiagramStatus } from "@/components/evaluation/diagram/DiagramStatus";
import Layout from "@/layouts/Layout.astro";
import { getInstance } from "@/services/instanceService";
import { getAction, getDecision, getFirstPhase } from "@/lib/phase";
import { Button } from "@design/ui/button";
import { ChevronLeft } from "lucide-react";
import { Card, CardDescription, CardTitle } from "@design/ui/card";

const { id, number } = Astro.params;

if (id == null || number == null) {
    return Astro.redirect("/");
}

const instance = await getInstance(parseInt(id));

if ("status" in instance) {
    if (instance.status === 404) {
        return Astro.redirect("/");
    }

    return new Response(JSON.stringify(instance), { status: instance.status });
}

const chat: Chat | undefined = instance.chats.find(
    (value, idx, _) => value.draftNumber === parseInt(number),
);

if (chat == null) {
    return new Response("Not found draft", { status: 400 });
}

// "zero"
const currentPhase: string = chat.actualNode ?? getFirstPhase();

const isDecision = currentPhase.startsWith("decision:");

const phaseId = isDecision
    ? currentPhase.substring("decision:".length)
    : currentPhase;

const isFinalized = chat.finalized;
---

<Layout title={`Session #${chat.draftNumber} Evaluation`}>
    <script src="/libs/raphael-min.js" is:inline></script>
    <script src="/libs/flowchart.js" is:inline></script>
    <main class="grid gap-8 mb-8">
        <div class="flex flex-row items-center justify-between">
            <a href={`/instances/${id}`}>
                <Button className="gap-1"
                    ><ChevronLeft size="20" /> Go back</Button
                >
            </a>

            <DiagramStatus currentPhase={phaseId} client:visible />
        </div>

        <ChatStatus chat={chat} client:visible />

        {
            isFinalized ? (
                <Card className="p-6 grid ">
                    <CardTitle className="justify-around">
                        <p class="text-primary font-semibold">
                            This chat is finalized
                        </p>
                    </CardTitle>
                    <CardDescription>
                        <p class="whitespace-pre-line text-sm text-card-foreground">
                            You can't make any changes to this chat anymore.
                        </p>
                    </CardDescription>
                </Card>
            ) : isDecision ? (
                <DecisionNode
                    instance={instance}
                    draftId={chat.id}
                    decision={getDecision(phaseId)}
                />
            ) : (
                <ActionNode
                    instance={instance}
                    draftId={chat.id}
                    action={getAction(phaseId)}
                />
            )
        }
    </main>
</Layout>

<script>
    declare var flowchart: any;
    var text = "";
    var diagramChannel = new BroadcastChannel("diagram");
    var diagram: any = null;

    const buildDiagram = () => {
        var $diagram = document.querySelector("#diagram");

        if ($diagram == null) return;

        if (diagram) {
            diagram.clean();
        }

        diagram = flowchart.parse(text);

        diagram.drawSVG("diagram", {
            x: 0,
            y: 0,
            "line-width": 2,
            "line-length": 30,
            "text-margin": 8,
            "font-size": 12,
            "font-color": "black",
            "line-color": "black",
            "element-color": "black",
            fill: "white",
            "yes-text": "Yes",
            "no-text": "No",
            "arrow-end": "block",
            scale: 0.9,
            // style symbol types
            symbols: {
                start: {
                    // "font-color": "red",
                    "element-color": "gold",
                    fill: "yellow",
                },
                condition: {
                    // "element-color": "gray",
                    fill: "gray",
                },
                end: {
                    class: "end-element",
                },
            },
            // even flowstate support ;-)
            flowstate: {
                current: {
                    fill: "lime",
                    // "font-color": "hsl(var(--background))",
                    "font-weight": "bold",
                },
                future: { fill: "#FFFF99" },
                default: {
                    fill: "#C45879",
                },
            },
        });
    };

    buildDiagram();

    diagramChannel.onmessage = (event) => {
        const { action, diagram } = event.data;

        if (action === "update") {
            text = diagram;
            buildDiagram();
        }
    };
</script>
